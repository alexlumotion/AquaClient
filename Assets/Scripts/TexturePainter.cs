using UnityEngine;

[RequireComponent(typeof(Camera))]
public class TexturePainter : MonoBehaviour
{
    [Header("–¶—ñ–ª—å –¥–ª—è –º–∞–ª—é–≤–∞–Ω–Ω—è")]
    public Renderer targetRenderer;               // –û–± º—î–∫—Ç, –Ω–∞ —è–∫–æ–º—É –º–∞–ª—é—î–º–æ
    public Texture2D originalTexture;             // –û—Ä–∏–≥—ñ–Ω–∞–ª (readonly)
    private Texture2D textureToPaint;             // –ö–ª–æ–Ω, –Ω–∞ —è–∫–æ–º—É –º–∞–ª—é—î–º–æ

    [Header("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ–Ω–∑–ª—è")]
    public Color brushColor = Color.red;
    public Color[] brushColors;
    public int brushSize = 8;

    private Camera mainCamera;

    // --- NEW: —Å—Ç–∞–Ω –¥–ª—è —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—ó ---
    private bool hasLastUV = false;
    private Vector2 lastUV;

    void Start()
    {
        mainCamera = GetComponent<Camera>();
        InitChecks();
        CloneTexture();
        AssignTextureToMaterial();
        EnsureMeshCollider();
        //DrawTestArea(); // –º–æ–∂–Ω–∞ —É–≤—ñ–º–∫–Ω—É—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç—É
    }

    void Update()
    {
        // –ü–æ—á–∞—Ç–æ–∫ –º–∞–ª—é–≤–∞–Ω–Ω—è ‚Äî —Ñ—ñ–∫—Å—É—î–º–æ –ø–µ—Ä—à—É —Ç–æ—á–∫—É
        if (Input.GetMouseButtonDown(0))
        {
            if (TryGetUVUnderCursor(out var uv))
            {
                PaintAtUV(uv);
                lastUV = uv;
                hasLastUV = true;
            }
        }

        // –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –º–∞–ª—é–≤–∞–Ω–Ω—è ‚Äî —ñ–Ω—Ç–µ—Ä–ø–æ–ª—é—î–º–æ –º—ñ–∂ lastUV —ñ –ø–æ—Ç–æ—á–Ω–∏–º UV
        if (Input.GetMouseButton(0))
        {
            if (TryGetUVUnderCursor(out var uv))
            {
                if (hasLastUV)
                {
                    PaintLineUV(lastUV, uv); // —Å—É—Ü—ñ–ª—å–Ω–∏–π –º–∞–∑–æ–∫
                }
                else
                {
                    PaintAtUV(uv);
                    hasLastUV = true;
                }
                lastUV = uv;
            }
        }

        // –ö—ñ–Ω–µ—Ü—å –º–∞–ª—é–≤–∞–Ω–Ω—è ‚Äî —Å–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
        if (Input.GetMouseButtonUp(0))
        {
            hasLastUV = false;
        }
    }

    // üß© –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—Ö—ñ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
    void InitChecks()
    {
        if (mainCamera == null)
            Debug.LogError("üö´ TexturePainter: –ö–∞–º–µ—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.");

        if (originalTexture == null)
            Debug.LogError("üö´ TexturePainter: –ù–µ –≤–∫–∞–∑–∞–Ω–∞ originalTexture.");

        if (targetRenderer == null)
            Debug.LogError("üö´ TexturePainter: –ù–µ –≤–∫–∞–∑–∞–Ω–æ Renderer.");
    }

    // üß¨ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É—Ä–∏
    void CloneTexture()
    {
        textureToPaint = new Texture2D(
            originalTexture.width,
            originalTexture.height,
            TextureFormat.RGBA32,
            false
        );

        textureToPaint.SetPixels(originalTexture.GetPixels());
        textureToPaint.Apply();

        Debug.Log($"üß¨ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–ª–æ–Ω —Ç–µ–∫—Å—Ç—É—Ä–∏ '{originalTexture.name}' ‚Üí '{textureToPaint.name}'");
    }

    // üé® –ü—Ä–∏–≤ º—è–∑–∫–∞ –∫–ª–æ–Ω—É –¥–æ –º–∞—Ç–µ—Ä—ñ–∞–ª—É
    void AssignTextureToMaterial()
    {
        targetRenderer.material.mainTexture = textureToPaint;
        Debug.Log("‚úÖ –ü—Ä–∏–≤ º—è–∑–∞–Ω–æ textureToPaint –¥–æ material.mainTexture");
    }

    // üß© MeshCollider setup
    void EnsureMeshCollider()
    {
        MeshCollider meshCol = targetRenderer.GetComponent<MeshCollider>();
        MeshFilter meshFilt = targetRenderer.GetComponent<MeshFilter>();

        if (meshCol != null && meshFilt != null && meshCol.sharedMesh == null)
        {
            meshCol.sharedMesh = meshFilt.sharedMesh;
            Debug.Log("üß© MeshCollider.mesh –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑ MeshFilter.sharedMesh");
        }
    }

    // --- NEW: –æ—Ç—Ä–∏–º–∞—î–º–æ UV –ø—ñ–¥ –∫—É—Ä—Å–æ—Ä–æ–º –±–µ–∑ –º–∞–ª—é–≤–∞–Ω–Ω—è ---
    bool TryGetUVUnderCursor(out Vector2 uv)
    {
        uv = default;
        Ray ray = mainCamera.ScreenPointToRay(Input.mousePosition);
        if (Physics.Raycast(ray, out RaycastHit hit))
        {
            Renderer rend = hit.collider.GetComponent<Renderer>();
            if (rend == targetRenderer)
            {
                uv = hit.textureCoord;
                return true;
            }
        }
        return false;
    }

    // --- NEW: –ø—Ä–æ–º–∞–ª—å–æ–≤—É—î–º–æ –ª—ñ–Ω—ñ—é –º—ñ–∂ –¥–≤–æ–º–∞ UV –∑ –∫—Ä–æ–∫–æ–º —É –ø—ñ–∫—Å–µ–ª—è—Ö ---
    void PaintLineUV(Vector2 uvA, Vector2 uvB)
    {
        if (textureToPaint == null) return;

        // –ü–µ—Ä–µ–≤–µ–¥–µ–º–æ —É –ø—ñ–∫—Å–µ–ª—ñ, —â–æ–± –∫—Ä–æ–∫ –±—É–≤ –≤—ñ–¥–Ω–æ—Å–Ω–æ —Ä–æ–∑–º—ñ—Ä—É –ø–µ–Ω–∑–ª—è
        Vector2 pA = new Vector2(uvA.x * textureToPaint.width,  uvA.y * textureToPaint.height);
        Vector2 pB = new Vector2(uvB.x * textureToPaint.width,  uvB.y * textureToPaint.height);

        float distPx = Vector2.Distance(pA, pB);
        float stepPx = Mathf.Max(1f, brushSize * 0.4f); // ~0.4 —Ä–∞–¥—ñ—É—Å–∞ –ø–µ–Ω–∑–ª—è
        int steps = Mathf.CeilToInt(distPx / stepPx);

        // –Ø–∫—â–æ —Ç–æ—á–∫–∏ –º–∞–π–∂–µ —Å–ø—ñ–≤–ø–∞–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–º–∞–ª—é—î–º–æ –≤ –∫—ñ–Ω—Ü–µ–≤—ñ–π
        if (steps <= 1)
        {
            PaintAtUV(uvB);
            return;
        }

        // –ü—Ä–æ–π—Ç–∏—Å—å —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ –≤—ñ–¥ A –¥–æ B
        float inv = 1f / steps;
        for (int s = 1; s <= steps; s++)
        {
            float t = s * inv;
            Vector2 uv = Vector2.Lerp(uvA, uvB, t);
            PaintAtUV(uv);
        }
    }

    // üéØ –ú–∞–ª—é–≤–∞–Ω–Ω—è –ø–æ UV (—Ç–≤–æ—è —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è ‚Äî –±–µ–∑ –∑–º—ñ–Ω –ª–æ–≥—ñ–∫–∏)
    void TryPaintUnderCursor()
    {
        Ray ray = mainCamera.ScreenPointToRay(Input.mousePosition);
        if (Physics.Raycast(ray, out RaycastHit hit))
        {
            Renderer rend = hit.collider.GetComponent<Renderer>();
            if (rend == targetRenderer)
            {
                PaintAtUV(hit.textureCoord);
            }
        }
    }

    // üñå –ú–∞–ª—é–≤–∞–Ω–Ω—è –ø–æ UV
    void PaintAtUV(Vector2 uv)
    {
        int x = Mathf.RoundToInt(uv.x * textureToPaint.width);
        int y = Mathf.RoundToInt(uv.y * textureToPaint.height);

        float sqrRadius = brushSize * brushSize;

        for (int i = -brushSize; i <= brushSize; i++)
        {
            for (int j = -brushSize; j <= brushSize; j++)
            {
                if (i * i + j * j <= sqrRadius)
                {
                    int px = x + i;
                    int py = y + j;

                    if (px >= 0 && py >= 0 && px < textureToPaint.width && py < textureToPaint.height)
                    {
                        textureToPaint.SetPixel(px, py, brushColor);
                    }
                }
            }
        }

        textureToPaint.Apply();
    }

    public Texture2D GetPaintedTextureCopy()
    {
        Texture2D copy = new Texture2D(textureToPaint.width, textureToPaint.height, textureToPaint.format, false);
        copy.SetPixels(textureToPaint.GetPixels());
        copy.Apply();
        return copy;
    }

    void DrawTestArea()
    {
        for (int x = 0; x < 200; x++)
        {
            for (int y = 0; y < 200; y++)
            {
                textureToPaint.SetPixel(x, y, Color.magenta);
            }
        }
        textureToPaint.Apply();
    }

    public void SetBrushColor(int id)
    {
        brushColor = brushColors[id];
    }

    public void SetFish(Renderer tRender, Texture2D tTexture)
    {
        targetRenderer = tRender;
        originalTexture = tTexture;
        CloneTexture();
        AssignTextureToMaterial();
        EnsureMeshCollider();
    }

    public void Clear()
    {
        CloneTexture();
        AssignTextureToMaterial();
        EnsureMeshCollider();
    }
}